Ссылка на исходные коды находится по адресу https://github.com/polinakhadorchanka/CRM-system
Везде где упоминается командная строка желательно использовать PowerShell в случае с Windows.
В случае проблем с сетью посмотреть возможные варианты решения можно по ссылку в конце данного файла.
Запуск готового проекта crm-system.
1. Установить docker desktop по ссылке https://docs.docker.com/install/ , выбрать соотвествующую операционную систему.
2. В случае, если установочник зависает и выдаёт сообщение об ошибке, возможным решением будет являться увеличение
системного времени ожидания процесса, для этого необходимо выполнить следующие действия:
	- нажать сочетание клавиш Win+R и написать regedit;
	- там открыть Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control и в окне справа(там видны файлы)
	нажать правой кнопкой мыши New->DWORD(32-bit) value, его назвать ServicesPipeTimeout и в значениее указать
	180000, после этого перезагрузить компьютер и попробовать запустить установку снова.
3. По завершению установки если вы используете корпоративную сеть, необходимо настроить прокси:
	- В домашней директории пользователя ~/.docker/config.json изменить данный файл на следующее содержание(пример):
		{
		 "proxies":
		 {
		   "default":
		   {
			 "httpProxy": "http://127.0.0.1:3001",
			 "httpsProxy": "http://127.0.0.1:3001",
			 "noProxy": "*.test.example.com,.example2.com"
		   }
		 }
		}
	- также в стеше найти Docker Desktop перейти в раздел resources->proxies включить и настроить
4. Создать базу данных. Скрипт находится в папке Database. Везде заменить название базы данных на вашу(в примере BORODICH,
в notepad++ это можно сделать нажав комбинацию клавиш crtl+H, затем ввести соответствующие данные в поля).
5. Запускаем образ на сервере через консоль:
	docker run -p 8080:3000 jav3927/crm-system:0.0.4 - запуск со стандартным конфигом(встроенным)
	docker run -p 8080:3000 -e config="Server=DBServer1,50100;Initial Catalog=BORODICH;User Id=nodejs@DBServer1;Password=nodejs;" jav3927/crm-system:0.0.4 - запуск с кастомным конфигом      
	Команда -p 8080:3000 указывает докеру, что нужно взять порт 3000 и пробросить его на порт 8080 (который будет открыт).
	(Чтобы воспользоваться сервисом надо написать localhost:8080 а не 3000)
6. Для остановки работы контейнера необходимо выполнить цепочку команд:
	- выполнить команду docker container ls - она выведет список контейнеров, в этом списке найти нужный нам;
	- docker stop id_нужного контейнера.
Создание нового контейнера/обновление версии уже существующего контейнера.
1.Установить докер(ссылки выше).
2.Написать приложение.
3.Собираем образы и запускаем контйнер(ы).
	3.1. В корне проекта необходимо разместить файл с названием Dockerfile. В качестве примера будет приведено содержание
	Dockerfile для проекта написанного по технологии NodeJs.
		- FROM node:latest		
		- WORKDIR /usr/src/app	
		- COPY package*.json ./
		- RUN npm install
		- COPY . .
		- EXPOSE 3000		
		- CMD ["node", "app.js"]
		
		Описание каждой строки:
		FROM node:latest - Этой строчкой мы даём понять докеру, что при запуске контейнера первым делом нужно будет скачать 
		из репозитория Docker и установить NodeJS, причём, последнюю версию, так же есть версия alpine
		(все самые лёгкие версии популярных фреймворков и библиотек в докере принято называть alpine);		
		WORKDIR /usr/src/app - В линуксе контейнера будут созданы те же стандартные папки, что и в других линуксах — /opt, /home,
		/etc, /usr и проч. Мы задаём рабочую директорию, с которой будем работать — /usr/src/app;
		EXPOSE 3000 - Открываем порт 3000. Дальнейшая связь с приложением, запущенным в контейнере, будет происходить через этот порт;
		COPY . . - Копируем содержимое исходного проекта в рабочую папку контейнера;
		RUN npm install - Устанавливаем все пакеты, необходимые для запуска приложения;
		CMD ["node", "app.js"] - Запускаем приложение командой node app.js;
		COPY package*.json ./ - Используется для установки зависимостей приложения.
		
	Чтобы собрать приложение, в терминале, в корневой папке проекта необходимо выполнить команду:
		docker build -t jav3927/crm-system .
		где jav3927/crm-system - название проекта, а "." в конце указывает, что собирать проект нужно именно из текущей папки,
		-t <имя> — в дальнейшем, приложение будет доступно по тегу, указанному здесь. Можно не указывать, тогда Docker сгенерирует 
		собственный тег, но отличить его от других будет невозможно.
	В случае успешной сборки должно быть сообщение Successfully built (токен), в таком случае можно запустить Docker контейнер
	выполнив команду: docker run -p 8080:3000 jav3927/crm-system (описание команды сверху).
	
Ссылка на полную статью с пример находится по адресу - https://habr.com/ru/post/448094/        		